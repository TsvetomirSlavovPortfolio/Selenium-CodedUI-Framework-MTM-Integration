// <copyright file="Constants.cs" company="Infosys Ltd.">
//  Copyright (c) Infosys Ltd. All rights reserved.
// </copyright>
// <summary>Constants.cs class stores constants values across framework.</summary>
// <auto-generated />
namespace INF.Selenium.TestAutomation.Entities
{
    public static class Constants
    {
        public const string PipeDelimitor = "||";
        public const string Pagination = "||Pagination_";
        public const string DynamicWebServiceData = "DYNAMIC||";
        public const string DoubleBackslash = "\\";
        public const string Semicolon = ";";
        public const string DoubleHyphen = "--";
        public const string BeginCommnet = "/*";
        public const string EndComment = "*/";
        public const char ForwardSlash = '/';
        public const char Hyphen = '-';
        public const char Colon = ':';
        public const string Xp = "XP_";
        public const string Cursor = "CURSOR";
        public const string Exec = "EXEC";
        public const string Drop = "DROP";
        public const string Declare = "DECLARE";
        public const string String = "STRING";
        public const string Integer = "INTEGER";
        public const string TestIterations = "TestIterations";
        public const string TestReport = "TestReport";
        public const string Pass = "Pass";
        public const string Fail = "Fail";
        public const int Zero = 0;
        public const string Jpg = ".jpg";
        public const string Hyperlink = @"=HYPERLINK(""";
        public const string Underscore = "_";
        public const string Space = " ";
        public const string Xlxs = ".xlsx";
        public const string Na = "NA";
        public const string Tab = "\t";
        public const string Txt = ".txt";
        public const string EventLog = "EventLog";
        public const string ErrorLog = "ErrorLog";
        public const string Oledb = "oledb";
        public const string Url = "http://url";
        public const string UnitTest = "UnitTest";
        public const string LongDateTimeFormat = "MM/dd/yyyy hh:mm:ss tt";
        public const string ChromeDriverPath = "packages\\Selenium.WebDriver.ChromeDriver.2.25.0.0\\driver\\";
        public const string IEDriverPath = "packages\\Selenium.WebDriver.IEDriver.3.0.0.0\\driver\\";
        public static class AppSetting
        {
            public const string RootFilePath = "RootFilePath";
            public const string FileNamePrefix = "TestReport_FileNamePrefix";
            public const string ExistTimeOut = "WaitForControlToExistTimeOut";
            public const string BrowserType = "BrowserType";
            public const string UiControlFile = "UIControlFile";
            public const string VerificationFile = "VerificationFile";
            public const string TestConfigurationFile = "TestConfigurationFile";
            public const string TestCaseFolderName = "TestCaseFolderName";
            public const string LoadWebServiceAPIData = "LoadWebServiceAPIData";
            public const string DsNName = "DSNName";
            public const string DeploymentItem = ".\\TestIterations\\TestIterations.xlsx";
            public const string TestIterationSheet = "TestIterations$";
            public const string Oledb = "System.Data.OleDb";
            //public const string Odbc = "System.Data.Odbc";
            public const string ConnectionString = @"Provider=Microsoft.ACE.OLEDB.12.0;Data Source=TestIterations.xlsx;Extended Properties='Excel 12.0 Xml;HDR=YES;IMEX=1'";
            //public const string ConnectionString ="Dsn=Excel Files;Driver={Microsoft Excel Driver (*.xlsx)};dbq=|DataDirectory|\\TestIterations.xlsx;defaultdir=.;driverid=790;maxbuffersize=2048;pagetimeout=5;readonly=true";
            //public const string ConnectionString ="Dsn=Excel Files;Driver={Microsoft Excel Driver (*.xlsx)};dbq=TestIterations.xlsx;defaultdir=.;driverid=790;maxbuffersize=2048;pagetimeout=5;readonly=true";
            public const string EmailNotifcationRequired = "EmailNotifcationRequired";
            public const string TestReportPath = "TestReportPath";
            public const string SmtpServerHostAddress = "SmtpServerHostAddress";
            public const string SmtpServerPort = "SmtpServerPort";
            public const string MailFrom = "MailFrom";
            public const string MailTo = "MailTo";
            public const string ExcelConStr = "excelConStr";
            public const string ExcelConStrDefineHeader = "excelConStrDefineHeader";
        }

        public static class WorkSheets
        {
            public const string TestIterationsWorkSheet = "TestIterations";
        }

        public static class ClassName
        {
            public const string TestCases = "TestCases.cs";
            public const string TestConfigurations = "TestConfigurations.cs";
            public const string BaseTestClass = "BaseTestClass.cs";
            public const string TestIterationsClassName = "TestIterations.cs";
            public const string UiActionsClassName = "UIActions.cs";
            public const string Data = "Data.cs";
            public const string Db = "DB.cs";
            public const string General = "General.cs";
            public const string Reporting = "Reporting.cs";
            public const string Result = "Result.cs";
            public const string Verifications = "Verifications.cs";
            public const string WebdriverBrowser = "WebdriverBrowser.cs";
            public const string EmailNotification = "EmailNotification.cs";
        }

        public static class Messages
        {
            public const string NotSupported = "Action {0} is not supported";
            public const string TestCaseFailedError = "Test case Failed. For more information read the test report: {0}";
            public const string ReportSheetError = "Couldn't create sheet in test report file. Error message: {0}";
            public const string ReportInsertError = " Couldn't insert test step result in test report file. Error message: {0}";
            public const string TestReportError = "Couldn't create test report file. Error message: {0}";
            public const string TestInitializationError = "Couldn't initiliaze test case and test data. Error message: {0}";
            public const string DueToException = "Due to exception - {0}";
            public const string WebDriverTimeoutException = "Due to web driver time out exception - No such element was found. {0}.";
            public const string VerificationError = "Header value {0} couldn't be found in sheet index 1 in Excel file Verifications.xlsx.";
            public const string TestConfigurationError = "Header value {0} couldn't be found in sheet index 1 in Excel file TestConfigurations.xlsx.";
            public const string TestCaseError = "Header value {0} couldn't be found in sheet index 1 in Excel file {1} TestCases\\{2}";
            public const string WorkSheetNotExist = "Worksheet with name {0} couldn't be found in test report file.";
            public const string TestCaseNameLimit = "Test case name is only allowed to be a maximum of 31 characters.";
            public const string ReportAlreadyExist = "Excel report file {0} already has a worksheet with test case name {1}. It's only allowed to add a test case once in file TestIterations.xlsx.";
            public const string SuccessfullCompletion = "Successfull completion of {0}";
            public const string CompleteSuccess = "Completed successfully.";
            public const string UiControlSheetError = "Header value {0} couldn't be found in sheet index 1 in Excel file UIControls.xlsx.";
        }

        public static class Queries
        {
            public const string InsertSummary = "Insert into [TestIterations$] (F1,F2,F3,F4,F5,F6) values (@applicationParam,@TestCaseIDParam,@descriptionSummaryParam,@resultSummaryParam,@ExecutionDurationParam,@ExecutionDocumentReference)";
        }

        public static class StyleNames
        {
            public const string StyleHeader = "styleHeader";
            public const string StyleResultPassed = "styleResultPassed";
            public const string StyleResultFailed = "styleResultFailed";
        }

        public static class Browsers
        {
            public const string Ie = "IE";
            public const string FireFox = "FIREFOX";
            public const string CHrome = "CHROME";
            public const string Iexplore = "iexplore";
            public const string Firefox = "firefox";
            public const string Chrome = "chrome";
        }

        public static class TestStepAction
        {
            public const string CloseWebDriverBrowsers = "CLOSEWEBDRIVERBROWSERS";
            public const string LaunchWebDriverBrowser = "LAUNCHWEBDRIVERBROWSER";
            public const string WebDriverEditUIControl = "WEBDRIVEREDITUICONTROL";
            public const string WebDriverAlertHandler = "WEBDRIVERALERTHANDLER";
            public const string WebDriverFrameHandler = "WEBDRIVERFRAMEHANDLER";
            public const string WebDriverSwitchToDefaultFrame = "WEBDRIVERSWITCHTODEFAULTFRAME";
            public const string WebDriverVerify = "WEBDRIVERVERIFY";
            public const string WebDriverSaveUIControl = "WEBDRIVERSAVEUICONTROL";
            public const string WebPaginationIteration = "WEBPAGINATIONITERATION";
            public const string WaitforUI = "WAITFORUI";
            public const string Sendkeys = "SENDKEYS";
        }

        public static class TestCase
        {
            public const string Application = "Application";
            public const string Name = "TestCase_Name";
            public const string Description = "TestCase_Description";
            public const string FileName = "TestCase_FileName";
        }

        public static class TestResultSummary
        {
            public const string ApplicationParam = "@applicationParam";
            public const string TestCaseIdParam = "@TestCaseIDParam";
            public const string DescriptionSummaryParam = "@descriptionSummaryParam";
            public const string ExecutionDurationParam = "@ExecutionDurationParam";
            public const string ResultSummaryParam = "@resultSummaryParam";
            public const string ExecutionDocumentReference = "@ExecutionDocumentReference";
        }

        public static class Verification
        {
            public const string VerificationId = "VERIFICATIONID";
            public const string VerificationType = "VERIFICATIONTYPE";
            public const string OperatorVerification = "OPERATOR";
            public const string VerifyBrowserExist = "Verify BrowserExist";
            public const string VerifyBrowserNotExist = "Verify BrowserNotExist";
            public const string BrowserWithTitle = "Browser with title (or part of title) ";
            public const string DoesExist = " does exist";
            public const string DbQryVerificationIdValue = "DatabaseQuery for given VerificationId must contain a value when using action Verify";
            public const string OpVerificationIdValue = "Operator for given VerificationId must contain a value when using action Verify";
            public const string TestDataValue = "TestData must contain a value when using action Verify";
        }

        public static class UiControls
        {
            public const string UiControlId = "UICONTROLID";
            public const string UiControlType = "UICONTROLTYPE";
            public const string UiControlSearchProperty = "UICONTROLSEARCHPROPERTY";
            public const string UiControlSearchValue = "UICONTROLSEARCHVALUE";
        }

        public static class DbActions
        {
            public const string Insert = "INSERT";
            public const string Update = "UPDATE";
            public const string Delete = "DELETE";
            public const string Call = "CALL";
            public const string IsEquals = "EQUALS";
            public const string NotEquals = "NOTEQUALS";
            public const string Contains = "CONTAINS";
            public const string NotContains = "NOTCONTAINS";
            public const string Commit = "COMMIT";
        }

        public static class TestConfiguration
        {
            public const string SNo = "S_NO";
            public const string Datatype = "DATATYPE";
            public const string VariableName = "VARIABLE_NAME";
            public const string TestData = "TEST_DATA";
        }

        public static class TestStep
        {
            public const string TestStepNumber = "TestStepNumber";
            public const string Action = "Action";
            public const string UiControlId = "UIControlId";
            public const string VerificationId = "VerificationId";
            public const string TestData = "TestData";
            public const string Remarks = "Remarks";
        }

        public static class TestResult
        {
            public const string Iteration = "Iteration";
            public const string StepNumber = "Step number";
            public const string Description = "Description";
            public const string Result = "Result";
            public const string Comment = "Comment";
            public const string Remarks = "Remarks";
        }

        public static class TestIteration
        {
            public const string StartDateTime = "Start Date/Time";
            public const string EndDateTime = "End Date/Time";
            public const string Duration = "Duration";
            public const string Application = "Application";
            public const string TestCaseName = "Test case name";
            public const string TestCaseDescription = "Test case description";
            public const string Result = "Result";
            public const string DocumentReference = "DocumentReference";
            public const string Description = "Description";
        }

        public static class UiActions
        {
            public const string EnterBracket = "{ENTER}";
            public const string DownBracket = "{DOWN}";
            public const string BrowswrExist = "BROWSEREXIST";
            public const string BrowserNotExists = "BROWSERNOTEXIST";
            public const string DataBaseValue = "DATABASEVALUE";
            public const string Alt = "ALT+";
            public const string Shift = "SHIFT+";
            public const string Control = "CONTROL+";
            public const string IsEnabled = "ISENABLED";
            public const string IsDisplayed = "ISDISPLAYED";
            public const string IsSelected = "ISSELECTED";
            public const string IsDisabled = "ISDISABLED";
        }
    }
}